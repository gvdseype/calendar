{"ast":null,"code":"var _jsxFileName = \"/Users/gilles/dev/easypost/frontend/src/components/ModalEditTodo.tsx\",\n  _s = $RefreshSig$();\nimport { Button, Checkbox, Form, Input, Modal } from \"antd\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ModalEditTodo = props => {\n  _s();\n  const [title, setTitle] = useState(null);\n  const [description, setDescription] = useState(null);\n  const [status, setStatus] = useState(null);\n  const handleOk = () => {\n    props.setIsModalEditOpen(false);\n  };\n  const handleCancel = () => {\n    props.setIsModalEditOpen(false);\n  };\n  const onChangeTitle = event => {\n    event.preventDefault();\n    setTitle(event.target.value);\n  };\n  const onChangeDescription = event => {\n    event.preventDefault();\n    setDescription(event.target.value);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log('from handle submit', title);\n    try {\n      const response = await axios.put('http://localhost:3001/api/todos', {\n        id: props.editId,\n        month: props.editMonth,\n        day: props.editDay,\n        title: title,\n        description: description,\n        status: status\n      });\n      if (response.status == 200) {\n        props.setTodos(props.todos.map(aTodo => aTodo.id !== props.editId ? aTodo : response.data));\n        setDescription(\"\");\n        setTitle(\"\");\n        props.setIsModalEditOpen(false);\n      }\n    } catch (error) {\n      console.error(`Error: ${error}`);\n    }\n  };\n  const handleDelete = async event => {\n    event.preventDefault();\n    try {\n      const response = await axios.delete(`http://localhost:3001/api/todos/${props.editId}`);\n      if (response.status == 200) {\n        props.setTodos(props.todos.filter(aTodo => aTodo.id !== props.editId));\n        props.setIsModalEditOpen(false);\n      }\n    } catch (error) {\n      console.error(`Error: ${error}`);\n    }\n  };\n  const onStatusChange = event => {\n    event.preventDefault();\n    setStatus(event.target.checked);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      mask: false,\n      title: \"Change the title, the description or the status\",\n      open: props.isModalEditTodoOpen,\n      onOk: handleOk,\n      onCancel: handleCancel,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        name: \"basic\",\n        labelCol: {\n          span: 8\n        },\n        wrapperCol: {\n          span: 16\n        },\n        style: {\n          maxWidth: 600\n        },\n        initialValues: {\n          remember: false\n        },\n        autoComplete: \"off\",\n        preserve: false,\n        children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"Title\",\n          name: \"title\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            onChange: onChangeTitle,\n            placeholder: props.editTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          label: \"description\",\n          name: \"description\",\n          rules: [{\n            required: true\n          }],\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            onChange: onChangeDescription,\n            placeholder: props.editDescription\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n          wrapperCol: {\n            offset: 8,\n            span: 16\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"primary\",\n            htmlType: \"submit\",\n            onClick: handleSubmit,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Checkbox, {\n          onChange: onStatusChange,\n          children: \"Done\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DeleteOutlined, {\n          onClick: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ModalEditTodo, \"wvhWhNJPMw5RRimH6C6J/b9QzxI=\");\n_c = ModalEditTodo;\nexport default ModalEditTodo;\nvar _c;\n$RefreshReg$(_c, \"ModalEditTodo\");","map":{"version":3,"names":["Button","Checkbox","Form","Input","Modal","axios","React","useState","DeleteOutlined","ModalEditTodo","props","title","setTitle","description","setDescription","status","setStatus","handleOk","setIsModalEditOpen","handleCancel","onChangeTitle","event","preventDefault","target","value","onChangeDescription","handleSubmit","console","log","response","put","id","editId","month","editMonth","day","editDay","setTodos","todos","map","aTodo","data","error","handleDelete","delete","filter","onStatusChange","checked","isModalEditTodoOpen","span","maxWidth","remember","required","editTitle","editDescription","offset"],"sources":["/Users/gilles/dev/easypost/frontend/src/components/ModalEditTodo.tsx"],"sourcesContent":["import { Button, Checkbox, Form, Input, Modal } from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/es/checkbox\";\nimport axios from \"axios\";\nimport React, { useState } from \"react\";\nimport { Todo } from \"../types\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n\ninterface ModalHolderProps {\n  isModalEditTodoOpen: boolean;\n  todos: Todo[];\n  editTitle: string;\n  editDescription: string;\n  editId: string;\n  editMonth: number;\n  editStatus: boolean;\n  editDay: number;\n  setIsModalEditOpen: React.Dispatch<React.SetStateAction<boolean>>;\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n  setEditTitle: React.Dispatch<React.SetStateAction<string>>;\n  setEditDescription: React.Dispatch<React.SetStateAction<string>>\n  setEditID: React.Dispatch<React.SetStateAction<string>>\n  setEditMonth: React.Dispatch<React.SetStateAction<number>>\n  setEditStatus: React.Dispatch<React.SetStateAction<boolean>>\n  setEditDay: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst ModalEditTodo = (props: ModalHolderProps) => {  \n  const [title, setTitle] = useState<string | null>(null)\n  const [description, setDescription] = useState<string | null>(null)\n  const [status, setStatus] = useState<boolean | null>(null)\n\n  const handleOk = () => {\n    props.setIsModalEditOpen(false);\n  };\n\n  const handleCancel = () => {\n    props.setIsModalEditOpen(false);\n  };\n\n  const onChangeTitle: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    event.preventDefault();\n    setTitle(event.target.value)\n  }\n\n  const onChangeDescription: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    event.preventDefault();\n    setDescription(event.target.value)\n  }\n\n  const handleSubmit = async (event: { preventDefault: () => void;})=> {\n    event.preventDefault();\n    console.log('from handle submit', title);\n    try {\n      const response = await axios.put('http://localhost:3001/api/todos', {id: props.editId, month: props.editMonth, day: props.editDay, title: title, description: description, status: status})\n      if (response.status == 200) {\n        props.setTodos(props.todos.map((aTodo: Todo) => aTodo.id !== props.editId ? aTodo : response.data))\n        setDescription(\"\")\n        setTitle(\"\")\n        props.setIsModalEditOpen(false)\n      }\n    } catch (error) {\n      console.error(`Error: ${error}`);\n    }\n  }\n\n  const handleDelete = async (event: { preventDefault: () => void;})=> {\n    event.preventDefault();\n    try {\n      const response = await axios.delete(`http://localhost:3001/api/todos/${props.editId}`)\n      if (response.status == 200) {\n        props.setTodos(props.todos.filter((aTodo: Todo) => aTodo.id !== props.editId))\n        props.setIsModalEditOpen(false)\n      }\n    } catch (error) {\n      console.error(`Error: ${error}`);\n    }\n  }\n\n  const onStatusChange = (event: CheckboxChangeEvent) => {\n    event.preventDefault();\n    setStatus(event.target.checked)\n  }\n\n  return (\n    <>\n      <Modal mask={false} title=\"Change the title, the description or the status\" open={props.isModalEditTodoOpen} onOk={handleOk} onCancel={handleCancel}>\n        <Form\n          name=\"basic\"\n          labelCol={{ span: 8 }}\n          wrapperCol={{ span: 16 }}\n          style={{ maxWidth: 600 }}\n          initialValues={{ remember: false }}\n          autoComplete=\"off\"\n          preserve={false}\n        >\n          <Form.Item\n            label=\"Title\"\n            name=\"title\"\n            rules={[{required: true}]}\n            >\n            <Input onChange={onChangeTitle} placeholder={props.editTitle}/>\n          </Form.Item>\n          <Form.Item\n            label=\"description\"\n            name=\"description\"\n            rules={[{required: true}]}\n          >\n            <Input onChange={onChangeDescription} placeholder={props.editDescription}/>\n          </Form.Item>\n          <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\n            <Button type=\"primary\" htmlType=\"submit\" onClick={handleSubmit}>\n              Submit\n            </Button>\n          </Form.Item>\n          <Checkbox onChange={onStatusChange}>Done</Checkbox>\n          <DeleteOutlined onClick={handleDelete}/>\n        </Form>\n      </Modal>\n    </>\n  )\n  \n}\n\nexport default ModalEditTodo"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}