{"ast":null,"code":"var _jsxFileName = \"/Users/gilles/dev/easypost/frontend/src/components/CalendarDisplay.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Calendar, Popover, Space, Button } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusToType = {\n  \"true\": \"success\",\n  \"false\": \"error\"\n};\nconst CalendarDisplay = props => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const showModal = () => {\n    setIsModalOpen(true);\n  };\n  const getData = value => {\n    const day = value.date();\n    const month = value.month();\n    const year = value.year();\n    const array = props.todos.filter(aTodo => {\n      if (aTodo.day === day && aTodo.month - 1 == month) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return array;\n  };\n  const dateCellRender = value => {\n    const data = getData(value);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"events\",\n        children: data.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Space, {\n            wrap: true,\n            children: /*#__PURE__*/_jsxDEV(Popover, {\n              placement: \"topLeft\",\n              title: item.title,\n              content: item.description,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                children: item.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Calendar, {\n    dateCellRender: dateCellRender\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarDisplay, \"mLsII5HRP5G63IA/8vjZ5YHXWr8=\");\n_c = CalendarDisplay;\nexport default CalendarDisplay;\nvar _c;\n$RefreshReg$(_c, \"CalendarDisplay\");","map":{"version":3,"names":["React","useState","Calendar","Popover","Space","Button","statusToType","CalendarDisplay","props","isModalOpen","setIsModalOpen","showModal","getData","value","day","date","month","year","array","todos","filter","aTodo","dateCellRender","data","map","item","title","description","id"],"sources":["/Users/gilles/dev/easypost/frontend/src/components/CalendarDisplay.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Calendar, Popover, Space, Button } from \"antd\";\nimport type {Dayjs} from \"dayjs\";\nimport { Todo } from \"../types\";\n\ninterface CalendarDisplayInterface {\n  todos: Todo[]\n}\n\nconst statusToType : Record<string, string> = {\n  \"true\": \"success\",\n  \"false\": \"error\",\n}\n\nconst CalendarDisplay = (props: CalendarDisplayInterface) => {\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  \n  const showModal = () => {\n    setIsModalOpen(true);\n  };\n\n  \n  const getData = (value: Dayjs) => {\n    const day = value.date()\n    const month = value.month()\n    const year = value.year()\n    \n    const array = props.todos.filter((aTodo: Todo) => {\n      if (aTodo.day === day && aTodo.month -1 == month) {\n        return true\n      } else {\n        return false\n      }\n    })\n\n    return array\n  }\n\n  const dateCellRender = (value: Dayjs) => {\n    const data: Todo[] = getData(value);\n    \n    return (\n      <div>\n        <ul className=\"events\">\n          {data.map((item) => (\n            <li key={item.id} >\n              <Space wrap>\n                <Popover placement=\"topLeft\" title={item.title} content={item.description}>\n                  <Button>{item.title}</Button>\n                </Popover>\n              </Space>\n            </li>\n          ))}\n        </ul>\n      </div>\n      \n    );\n  };\n\n  return (\n    <Calendar dateCellRender={dateCellRender}/>\n  )\n}\n\nexport default CalendarDisplay"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,OAAO,EAAEC,KAAK,EAAEC,MAAM,QAAQ,MAAM;AAAC;AAQxD,MAAMC,YAAqC,GAAG;EAC5C,MAAM,EAAE,SAAS;EACjB,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,eAAe,GAAIC,KAA+B,IAAK;EAAA;EAC3D,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAU,KAAK,CAAC;EAE9D,MAAMU,SAAS,GAAG,MAAM;IACtBD,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAGD,MAAME,OAAO,GAAIC,KAAY,IAAK;IAChC,MAAMC,GAAG,GAAGD,KAAK,CAACE,IAAI,EAAE;IACxB,MAAMC,KAAK,GAAGH,KAAK,CAACG,KAAK,EAAE;IAC3B,MAAMC,IAAI,GAAGJ,KAAK,CAACI,IAAI,EAAE;IAEzB,MAAMC,KAAK,GAAGV,KAAK,CAACW,KAAK,CAACC,MAAM,CAAEC,KAAW,IAAK;MAChD,IAAIA,KAAK,CAACP,GAAG,KAAKA,GAAG,IAAIO,KAAK,CAACL,KAAK,GAAE,CAAC,IAAIA,KAAK,EAAE;QAChD,OAAO,IAAI;MACb,CAAC,MAAM;QACL,OAAO,KAAK;MACd;IACF,CAAC,CAAC;IAEF,OAAOE,KAAK;EACd,CAAC;EAED,MAAMI,cAAc,GAAIT,KAAY,IAAK;IACvC,MAAMU,IAAY,GAAGX,OAAO,CAACC,KAAK,CAAC;IAEnC,oBACE;MAAA,uBACE;QAAI,SAAS,EAAC,QAAQ;QAAA,UACnBU,IAAI,CAACC,GAAG,CAAEC,IAAI,iBACb;UAAA,uBACE,QAAC,KAAK;YAAC,IAAI;YAAA,uBACT,QAAC,OAAO;cAAC,SAAS,EAAC,SAAS;cAAC,KAAK,EAAEA,IAAI,CAACC,KAAM;cAAC,OAAO,EAAED,IAAI,CAACE,WAAY;cAAA,uBACxE,QAAC,MAAM;gBAAA,UAAEF,IAAI,CAACC;cAAK;gBAAA;gBAAA;gBAAA;cAAA;YAAU;cAAA;cAAA;cAAA;YAAA;UACrB;YAAA;YAAA;YAAA;UAAA;QACJ,GALDD,IAAI,CAACG,EAAE;UAAA;UAAA;UAAA;QAAA,QAOjB;MAAC;QAAA;QAAA;QAAA;MAAA;IACC;MAAA;MAAA;MAAA;IAAA,QACD;EAGV,CAAC;EAED,oBACE,QAAC,QAAQ;IAAC,cAAc,EAAEN;EAAe;IAAA;IAAA;IAAA;EAAA,QAAE;AAE/C,CAAC;AAAA,GAhDKf,eAAe;AAAA,KAAfA,eAAe;AAkDrB,eAAeA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}