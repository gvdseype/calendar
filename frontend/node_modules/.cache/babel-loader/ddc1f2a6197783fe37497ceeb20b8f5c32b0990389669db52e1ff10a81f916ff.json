{"ast":null,"code":"var _jsxFileName = \"/Users/gilles/dev/easypost/frontend/src/components/CalendarDisplay.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Calendar, Popover, Space, Button } from \"antd\";\nimport ModalAddTodo from \"./ModalAddTodo\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusToType = {\n  \"true\": \"success\",\n  \"false\": \"error\"\n};\nconst CalendarDisplay = props => {\n  _s();\n  const [isModalEditTodoOpen, setIsModalEditTodoOpen] = useState(false);\n  const [isModalAddTodoOpen, setIsModalAddTodoOpen] = useState(false);\n  const [selectedDay, setSelectedDay] = useState();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [status, setStatus] = useState(false);\n  const showModalAddNewTodo = () => {\n    setTitle(\"\");\n    setDescription(\"\");\n    setStatus(false);\n    setIsModalAddTodoOpen(true);\n  };\n  const showModalEditTodo = () => {\n    setIsModalEditTodoOpen(true);\n  };\n  const getData = value => {\n    const day = value.date();\n    const month = value.month();\n    const array = props.todos.filter(aTodo => {\n      if (aTodo.day === day && aTodo.month - 1 == month) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return array;\n  };\n  const dateCellRender = value => {\n    // console.log('from datacellRender, value:', value);\n\n    const data = getData(value);\n    if (data.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"events\",\n          children: data.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Space, {\n              wrap: true,\n              children: /*#__PURE__*/_jsxDEV(Popover, {\n                placement: \"topLeft\",\n                title: todo.title,\n                content: todo.description,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: showModalEditTodo,\n                  children: todo.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this)\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PlusCircleOutlined, {\n          onClick: showModalAddNewTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(PlusCircleOutlined, {\n        onClick: showModalAddNewTodo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  console.log(\"current title:\", title, \"current description:\", description, \"current status:\", status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: dateCellRender,\n      onSelect: date => setSelectedDay(date),\n      onChange: date => setSelectedDay(selectedDay)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalAddTodo, {\n      isModalAddTodoOpen: isModalAddTodoOpen,\n      setIsModalAddTodoOpen: setIsModalAddTodoOpen,\n      setTodos: props.setTodos,\n      todos: props.todos,\n      value: selectedDay,\n      title: title,\n      setTitle: setTitle,\n      description: description,\n      setDescription: setDescription,\n      status: status,\n      setStatus: setStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(CalendarDisplay, \"8nNvqsIpV0cusAzyv7eLurroJUQ=\");\n_c = CalendarDisplay;\nexport default CalendarDisplay;\nvar _c;\n$RefreshReg$(_c, \"CalendarDisplay\");","map":{"version":3,"names":["React","useState","Calendar","Popover","Space","Button","ModalAddTodo","PlusCircleOutlined","statusToType","CalendarDisplay","props","isModalEditTodoOpen","setIsModalEditTodoOpen","isModalAddTodoOpen","setIsModalAddTodoOpen","selectedDay","setSelectedDay","title","setTitle","description","setDescription","status","setStatus","showModalAddNewTodo","showModalEditTodo","getData","value","day","date","month","array","todos","filter","aTodo","dateCellRender","data","length","map","todo","id","console","log","setTodos"],"sources":["/Users/gilles/dev/easypost/frontend/src/components/CalendarDisplay.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Calendar, Popover, Space, Button } from \"antd\";\nimport type {Dayjs} from \"dayjs\";\nimport { Todo } from \"../types\";\nimport ModalHolder from \"./ModalHolder\";\nimport ModalAddTodo from \"./ModalAddTodo\";\nimport DisabledContext from \"antd/es/config-provider/DisabledContext\";\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\n\ninterface CalendarDisplayInterface {\n  todos: Todo[];\n  setTodos: React.Dispatch<React.SetStateAction<Todo[]>>;\n}\n\nconst statusToType : Record<string, string> = {\n  \"true\": \"success\",\n  \"false\": \"error\",\n}\n\nconst CalendarDisplay = (props: CalendarDisplayInterface) => {\n  const [isModalEditTodoOpen, setIsModalEditTodoOpen] = useState<boolean>(false);\n  const [isModalAddTodoOpen, setIsModalAddTodoOpen] = useState<boolean>(false);\n  const [selectedDay, setSelectedDay] = useState<Dayjs>();\n\n  const [title, setTitle] = useState<string>(\"\")\n  const [description, setDescription] = useState<string>(\"\")\n  const [status, setStatus] = useState<boolean>(false)\n\n  const showModalAddNewTodo = () => {\n    setTitle(\"\")\n    setDescription(\"\")\n    setStatus(false)\n    setIsModalAddTodoOpen(true);\n  };\n\n  const showModalEditTodo = () => {\n    setIsModalEditTodoOpen(true)\n  }\n\n  const getData = (value: Dayjs) => {\n    const day = value.date()\n    const month = value.month()\n    \n    const array = props.todos.filter((aTodo: Todo) => {\n      if (aTodo.day === day && aTodo.month -1 == month) {\n        return true\n      } else {\n        return false\n      }\n    })    \n    return array\n  }\n\n  const dateCellRender = (value: Dayjs) => {\n    // console.log('from datacellRender, value:', value);\n    \n    const data: Todo[] = getData(value);\n    \n    if (data.length > 0) {\n      return (\n        <div>\n          <ul className=\"events\">\n            {data.map((todo) => (\n              <li key={todo.id} >\n                <Space wrap>\n                  <Popover placement=\"topLeft\" title={todo.title} content={todo.description}>\n                    <Button onClick={showModalEditTodo}>{todo.title}</Button>\n                  </Popover>\n                </Space>\n              </li>\n            ))}\n          </ul>\n          <PlusCircleOutlined onClick={showModalAddNewTodo}/>\n\n        </div>\n      );\n    } else {\n      return (\n        <PlusCircleOutlined onClick={showModalAddNewTodo}/>\n      )\n    }\n    \n  };\n\n  console.log(\"current title:\", title, \"current description:\", description, \"current status:\", status);\n  \n  return (\n    <div>\n      <Calendar dateCellRender={dateCellRender} onSelect={(date: Dayjs) => setSelectedDay(date)} onChange={(date: Dayjs) => setSelectedDay(selectedDay)}/>\n      <ModalAddTodo isModalAddTodoOpen={isModalAddTodoOpen} setIsModalAddTodoOpen={setIsModalAddTodoOpen} setTodos={props.setTodos} todos={props.todos} value={selectedDay} title={title} setTitle={setTitle} description={description} setDescription={setDescription} status={status} setStatus={setStatus} />\n    </div>\n  )\n}\n\nexport default CalendarDisplay"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}